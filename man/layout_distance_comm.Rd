% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization.R
\name{layout_distance_comm}
\alias{layout_distance_comm}
\title{Calculate Distances for Community-Based Network Layout}
\usage{
layout_distance_comm(g, membership, eps = 0.02)
}
\arguments{
\item{g}{An iGraph object representing the network to be analyzed. The network must have edge weights
stored in \code{E(g)$weight}. If the network is unweighted, set \code{E(g)$weight} to 1.0 for all edges.}

\item{membership}{A numeric vector representing the community membership of each node, where each
entry corresponds to a node in the graph \code{g} (ordered as \code{V(g)}).}

\item{eps}{A numeric value representing the minimum distance between nodes within the same community.
The default value is 0.02, and typical values range from 0.1 to 0.2.}
}
\value{
A numeric vector of distances between pairs of nodes, ordered according to the edges in \code{g} (i.e., \code{E(g)}).
Nodes in the same community will have smaller distances, while nodes in different communities will be spread further apart.
}
\description{
The \code{layout_distance_comm} function computes distances between pairs of nodes in a network
to enhance visualization. The function clusters nodes belonging to the same community more
closely while pushing nodes from different communities further apart.
}
\details{
The function calculates distances based on edge weights and community membership. The parameter
\code{eps} sets the minimum distance between nodes within the same community, while the actual distance depends
on the edge weight between the nodes.
}
\examples{
# Assuming 'g' is a pre-existing iGraph object and 'membership' is a vector of community memberships
distances <- layout_distance_comm(g, membership, eps = 0.15)

}
