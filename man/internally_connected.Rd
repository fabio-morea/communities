% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quality.R
\name{internally_connected}
\alias{internally_connected}
\title{Calculate the Number of Connected Components within Each Community}
\usage{
internally_connected(g, community_labels)
}
\arguments{
\item{g}{An iGraph object representing the network to be analyzed.}

\item{community_labels}{A vector of community labels, where each label corresponds to a node in the graph \code{g}. The length of this vector must match the number of vertices in the graph.}
}
\value{
A numeric vector where each element corresponds to the number of connected components in one of the communities. The order of the communities matches the order of the unique community labels in the input.
}
\description{
The \code{internally_connected} function calculates how many connected components exist within each community of a given network. For each community, it extracts the subgraph containing only the nodes from that community and computes the number of connected components within that subgraph.
}
\details{
The function first checks that the length of the \code{community_labels} vector matches the number of nodes in the graph. It then assigns the community labels to the vertices in the graph. For each community, the function extracts the subgraph corresponding to that community and counts the number of connected components in that subgraph. This can be useful for analyzing the internal structure of communities within a network.
}
\examples{
# Create a simple graph and assign community labels
g <- make_ring_of_cliques(4, 5)
community_labels <- V(g)$community
internal_components <- internally_connected(g, community_labels)
print(internal_components)
}
